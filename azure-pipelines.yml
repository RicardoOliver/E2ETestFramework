# Azure DevOps Pipeline para E2E Testing Framework
# Suporta múltiplos ambientes e estratégias de deploy

trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
    - release/*
    - hotfix/*
  paths:
    exclude:
    - README.md
    - docs/*
    - .gitignore

pr:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

variables:
  # Build Configuration
  buildConfiguration: 'Release'
  testProject: 'E2ETestFramework.Tests'
  mainProject: 'E2ETestFramework'
  
  # Test Configuration
  testTimeout: 30
  maxParallelTests: 3
  
  # Versioning
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(variables['Build.SourceBranch'], 0)]
  buildVersion: '$(majorVersion).$(minorVersion).$(patchVersion)'
  
  # Environments
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    targetEnvironment: 'Production'
    baseUrl: 'https://the-internet.herokuapp.com'
  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    targetEnvironment: 'Staging'
    baseUrl: 'https://the-internet.herokuapp.com'
  ${{ else }}:
    targetEnvironment: 'Development'
    baseUrl: 'https://the-internet.herokuapp.com'

pool:
  vmImage: 'windows-latest'

stages:
# ================================
# STAGE 1: BUILD & UNIT TESTS
# ================================
- stage: Build
  displayName: '🔨 Build & Unit Tests'
  jobs:
  - job: BuildAndUnitTest
    displayName: 'Build Solution & Run Unit Tests'
    timeoutInMinutes: 15
    
    steps:
    - checkout: self
      fetchDepth: 1
      
    - task: UseDotNet@2
      displayName: '📦 Install .NET 8.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false

    - task: DotNetCoreCLI@2
      displayName: '🔄 Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
        verbosityRestore: 'minimal'

    - task: DotNetCoreCLI@2
      displayName: '🔨 Build Solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore --verbosity minimal /p:Version=$(buildVersion)'

    - task: DotNetCoreCLI@2
      displayName: '🧪 Run Unit Tests'
      inputs:
        command: 'test'
        projects: '$(mainProject)/**/*UnitTests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage" --results-directory $(Agent.TempDirectory)/UnitTestResults'
      continueOnError: true
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: PublishTestResults@2
      displayName: '📊 Publish Unit Test Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/UnitTestResults/**/*.trx'
        mergeTestResults: true
        failTaskOnFailedTests: false
        testRunTitle: 'Unit Tests - $(targetEnvironment)'
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: DotNetCoreCLI@2
      displayName: '📦 Publish Test Project'
      inputs:
        command: 'publish'
        projects: '$(testProject)/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/TestProject'
        publishWebProjects: false

    - task: DotNetCoreCLI@2
      displayName: '📦 Publish Main Project'
      inputs:
        command: 'publish'
        projects: '$(mainProject)/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/MainProject'
        publishWebProjects: false

    - task: CopyFiles@2
      displayName: '📋 Copy Pipeline Files'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          azure-pipelines.yml
          README.md
          .gitignore
          **/*.md
        TargetFolder: '$(Build.ArtifactStagingDirectory)/PipelineFiles'

    - task: PublishBuildArtifacts@1
      displayName: '📤 Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'BuildArtifacts-$(buildVersion)'
        publishLocation: 'Container'

# ================================
# STAGE 2: E2E TESTS
# ================================
- stage: E2ETests
  displayName: '🧪 E2E Tests'
  dependsOn: Build
  condition: succeeded()
  
  jobs:
  # Smoke Tests - Execução rápida
  - job: SmokeTests
    displayName: '💨 Smoke Tests'
    timeoutInMinutes: 20
    
    steps:
    - template: templates/e2e-test-template.yml
      parameters:
        testCategory: 'smoke'
        testDisplayName: 'Smoke Tests'
        headlessMode: true
        browser: 'Chrome'
        maxParallel: 2

  # Regression Tests - Execução completa
  - job: RegressionTests
    displayName: '🔄 Regression Tests'
    dependsOn: SmokeTests
    condition: succeeded()
    timeoutInMinutes: 45
    strategy:
      matrix:
        Chrome:
          browserName: 'Chrome'
        Firefox:
          browserName: 'Firefox'
        Edge:
          browserName: 'Edge'
    
    steps:
    - template: templates/e2e-test-template.yml
      parameters:
        testCategory: 'regression'
        testDisplayName: 'Regression Tests - $(browserName)'
        headlessMode: true
        browser: '$(browserName)'
        maxParallel: 1

  # Security Tests
  - job: SecurityTests
    displayName: '🔒 Security Tests'
    dependsOn: SmokeTests
    condition: succeeded()
    timeoutInMinutes: 25
    
    steps:
    - template: templates/e2e-test-template.yml
      parameters:
        testCategory: 'security'
        testDisplayName: 'Security Tests'
        headlessMode: true
        browser: 'Chrome'
        maxParallel: 1

  # Accessibility Tests
  - job: AccessibilityTests
    displayName: '♿ Accessibility Tests'
    dependsOn: SmokeTests
    condition: succeeded()
    timeoutInMinutes: 20
    
    steps:
    - template: templates/e2e-test-template.yml
      parameters:
        testCategory: 'accessibility'
        testDisplayName: 'Accessibility Tests'
        headlessMode: true
        browser: 'Chrome'
        maxParallel: 1

# ================================
# STAGE 3: QUALITY GATES
# ================================
- stage: QualityGates
  displayName: '🎯 Quality Gates'
  dependsOn: E2ETests
  condition: succeeded()
  
  jobs:
  - job: QualityAnalysis
    displayName: 'Quality Analysis & Reporting'
    
    steps:
    - checkout: none
    
    - task: DownloadBuildArtifacts@0
      displayName: '📥 Download Test Artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      displayName: '📊 Generate Quality Report'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "🔍 Analyzing Test Results..."
          
          # Coletar resultados de teste
          $testResultsPath = "$(System.ArtifactsDirectory)"
          $reportPath = "$(Build.ArtifactStagingDirectory)/QualityReport"
          New-Item -ItemType Directory -Path $reportPath -Force
          
          # Analisar resultados de teste
          $testFiles = Get-ChildItem -Path $testResultsPath -Filter "*.trx" -Recurse
          $totalTests = 0
          $passedTests = 0
          $failedTests = 0
          
          foreach ($file in $testFiles) {
            Write-Host "📄 Processing: $($file.Name)"
            # Aqui você pode adicionar lógica para analisar os arquivos .trx
          }
          
          # Calcular métricas
          $passRate = if ($totalTests -gt 0) { ($passedTests / $totalTests) * 100 } else { 0 }
          
          Write-Host "📈 Test Summary:"
          Write-Host "   Total Tests: $totalTests"
          Write-Host "   Passed: $passedTests"
          Write-Host "   Failed: $failedTests"
          Write-Host "   Pass Rate: $($passRate.ToString('F2'))%"
          
          # Definir quality gates
          $minPassRate = 90
          if ($passRate -lt $minPassRate) {
            Write-Host "❌ Quality Gate Failed: Pass rate ($($passRate.ToString('F2'))%) is below minimum ($minPassRate%)"
            exit 1
          } else {
            Write-Host "✅ Quality Gate Passed: Pass rate meets requirements"
          }
          
          # Criar relatório JSON
          $report = @{
            timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
            environment = "$(targetEnvironment)"
            buildVersion = "$(buildVersion)"
            totalTests = $totalTests
            passedTests = $passedTests
            failedTests = $failedTests
            passRate = $passRate
            qualityGatePassed = $passRate -ge $minPassRate
          }
          
          $report | ConvertTo-Json | Out-File -FilePath "$reportPath/quality-report.json"
          Write-Host "📋 Quality report saved to: $reportPath/quality-report.json"

    - task: PublishBuildArtifacts@1
      displayName: '📤 Publish Quality Report'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/QualityReport'
        ArtifactName: 'QualityReport-$(buildVersion)'

# ================================
# STAGE 4: DEPLOYMENT
# ================================
- stage: Deploy
  displayName: '🚀 Deploy'
  dependsOn: QualityGates
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/develop'))
  
  jobs:
  - deployment: DeployToEnvironment
    displayName: 'Deploy to $(targetEnvironment)'
    environment: '$(targetEnvironment)'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          
          - task: DownloadBuildArtifacts@0
            displayName: '📥 Download Build Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'BuildArtifacts-$(buildVersion)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: PowerShell@2
            displayName: '🚀 Deploy Application'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "🚀 Deploying to $(targetEnvironment) environment..."
                Write-Host "📦 Build Version: $(buildVersion)"
                Write-Host "🌐 Target URL: $(baseUrl)"
                
                # Aqui você adicionaria os passos reais de deploy
                # Por exemplo: deploy para Azure App Service, IIS, Docker, etc.
                
                Write-Host "✅ Deployment completed successfully!"

          - task: PowerShell@2
            displayName: '🔍 Post-Deploy Verification'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "🔍 Running post-deployment verification..."
                
                # Verificar se a aplicação está respondendo
                try {
                  $response = Invoke-WebRequest -Uri "$(baseUrl)" -Method GET -TimeoutSec 30
                  if ($response.StatusCode -eq 200) {
                    Write-Host "✅ Application is responding correctly"
                  } else {
                    Write-Host "❌ Application returned status code: $($response.StatusCode)"
                    exit 1
                  }
                } catch {
                  Write-Host "❌ Failed to connect to application: $($_.Exception.Message)"
                  exit 1
                }

# ================================
# STAGE 5: POST-DEPLOY TESTS
# ================================
- stage: PostDeployTests
  displayName: '🧪 Post-Deploy Tests'
  dependsOn: Deploy
  condition: succeeded()
  
  jobs:
  - job: PostDeploymentValidation
    displayName: 'Post-Deployment Validation'
    timeoutInMinutes: 20
    
    steps:
    - template: templates/e2e-test-template.yml
      parameters:
        testCategory: 'smoke'
        testDisplayName: 'Post-Deploy Smoke Tests'
        headlessMode: true
        browser: 'Chrome'
        maxParallel: 1
        isPostDeploy: true

# ================================
# STAGE 6: NOTIFICATIONS
# ================================
- stage: Notifications
  displayName: '📢 Notifications'
  dependsOn: 
  - Deploy
  - PostDeployTests
  condition: always()
  
  jobs:
  - job: SendNotifications
    displayName: 'Send Notifications'
    
    steps:
    - checkout: none
    
    - task: PowerShell@2
      displayName: '📧 Send Notification'
      inputs:
        targetType: 'inline'
        script: |
          $status = "$(Agent.JobStatus)"
          $environment = "$(targetEnvironment)"
          $buildVersion = "$(buildVersion)"
          $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
          
          Write-Host "📢 Sending notification..."
          Write-Host "   Status: $status"
          Write-Host "   Environment: $environment"
          Write-Host "   Version: $buildVersion"
          Write-Host "   Build URL: $buildUrl"
          
          # Aqui você pode adicionar integração com:
          # - Microsoft Teams
          # - Slack
          # - Email
          # - ServiceNow
          # etc.
          
          if ($status -eq "Succeeded") {
            Write-Host "✅ Deployment successful notification sent"
          } else {
            Write-Host "❌ Deployment failure notification sent"
          }
